import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { sha256 } from './js-sha256';
/**
 * Abstraction for crypto algorithms
 */
import * as ɵngcc0 from '@angular/core';
export class HashHandler {
}
export class DefaultHashHandler {
    calcHash(valueToHash, algorithm) {
        return __awaiter(this, void 0, void 0, function* () {
            // const encoder = new TextEncoder();
            // const hashArray = await window.crypto.subtle.digest(algorithm, data);
            // const data = encoder.encode(valueToHash);
            const hashArray = sha256.array(valueToHash);
            // const hashString = this.toHashString(hashArray);
            const hashString = this.toHashString2(hashArray);
            return hashString;
        });
    }
    toHashString2(byteArray) {
        let result = '';
        for (let e of byteArray) {
            result += String.fromCharCode(e);
        }
        return result;
    }
    toHashString(buffer) {
        const byteArray = new Uint8Array(buffer);
        let result = '';
        for (let e of byteArray) {
            result += String.fromCharCode(e);
        }
        return result;
    }
}
DefaultHashHandler.ɵfac = function DefaultHashHandler_Factory(t) { return new (t || DefaultHashHandler)(); };
DefaultHashHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DefaultHashHandler, factory: DefaultHashHandler.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultHashHandler, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC1oYW5kbGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL3Rva2VuLXZhbGlkYXRpb24vaGFzaC1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFckM7QUFDQTtBQUNBLEdBQUc7O0FBQ0gsTUFBTSxPQUFnQixXQUFXO0FBQ2pDLENBQ0M7QUFHRCxNQUFNLE9BQU8sa0JBQWtCO0FBQUcsSUFDMUIsUUFBUSxDQUFDLFdBQW1CLEVBQUUsU0FBaUI7QUFBSTtBQUV4RCxZQURDLHFDQUFxQztBQUN6QyxZQUFJLHdFQUF3RTtBQUM1RSxZQUFJLDRDQUE0QztBQUNoRCxZQUNJLE1BQU0sU0FBUyxHQUFJLE1BQWMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekQsWUFBSSxtREFBbUQ7QUFDdkQsWUFBSSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JELFlBQ0ksT0FBTyxVQUFVLENBQUM7QUFDdEIsUUFBRSxDQUFDO0FBRUYsS0FGRTtBQUNILElBQ0UsYUFBYSxDQUFDLFNBQW1CO0FBQ25DLFFBQUksSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFFBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxTQUFTLEVBQUU7QUFDN0IsWUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxTQUFLO0FBQ0wsUUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSCxJQUNFLFlBQVksQ0FBQyxNQUFtQjtBQUNsQyxRQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLFFBQUksSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFFBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxTQUFTLEVBQUU7QUFDN0IsWUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxTQUFLO0FBQ0wsUUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSDs4Q0E5QkMsVUFBVTs7Ozs7QUFYQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQTdCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tICcuL2pzLXNoYTI1Nic7XG5cbi8qKlxuICogQWJzdHJhY3Rpb24gZm9yIGNyeXB0byBhbGdvcml0aG1zXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBIYXNoSGFuZGxlciB7XG4gIGFic3RyYWN0IGNhbGNIYXNoKHZhbHVlVG9IYXNoOiBzdHJpbmcsIGFsZ29yaXRobTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGVmYXVsdEhhc2hIYW5kbGVyIGltcGxlbWVudHMgSGFzaEhhbmRsZXIge1xuICBhc3luYyBjYWxjSGFzaCh2YWx1ZVRvSGFzaDogc3RyaW5nLCBhbGdvcml0aG06IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8gY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIC8vIGNvbnN0IGhhc2hBcnJheSA9IGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmRpZ2VzdChhbGdvcml0aG0sIGRhdGEpO1xuICAgIC8vIGNvbnN0IGRhdGEgPSBlbmNvZGVyLmVuY29kZSh2YWx1ZVRvSGFzaCk7XG5cbiAgICBjb25zdCBoYXNoQXJyYXkgPSAoc2hhMjU2IGFzIGFueSkuYXJyYXkodmFsdWVUb0hhc2gpO1xuICAgIC8vIGNvbnN0IGhhc2hTdHJpbmcgPSB0aGlzLnRvSGFzaFN0cmluZyhoYXNoQXJyYXkpO1xuICAgIGNvbnN0IGhhc2hTdHJpbmcgPSB0aGlzLnRvSGFzaFN0cmluZzIoaGFzaEFycmF5KTtcblxuICAgIHJldHVybiBoYXNoU3RyaW5nO1xuICB9XG5cbiAgdG9IYXNoU3RyaW5nMihieXRlQXJyYXk6IG51bWJlcltdKSB7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGZvciAobGV0IGUgb2YgYnl0ZUFycmF5KSB7XG4gICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHRvSGFzaFN0cmluZyhidWZmZXI6IEFycmF5QnVmZmVyKSB7XG4gICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgZm9yIChsZXQgZSBvZiBieXRlQXJyYXkpIHtcbiAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaGV4U3RyaW5nKGJ1ZmZlcikge1xuICAvLyAgICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgLy8gICAgIGNvbnN0IGhleENvZGVzID0gWy4uLmJ5dGVBcnJheV0ubWFwKHZhbHVlID0+IHtcbiAgLy8gICAgICAgY29uc3QgaGV4Q29kZSA9IHZhbHVlLnRvU3RyaW5nKDE2KTtcbiAgLy8gICAgICAgY29uc3QgcGFkZGVkSGV4Q29kZSA9IGhleENvZGUucGFkU3RhcnQoMiwgJzAnKTtcbiAgLy8gICAgICAgcmV0dXJuIHBhZGRlZEhleENvZGU7XG4gIC8vICAgICB9KTtcblxuICAvLyAgICAgcmV0dXJuIGhleENvZGVzLmpvaW4oJycpO1xuICAvLyAgIH1cblxuICAvLyB0b0hhc2hTdHJpbmcoaGV4U3RyaW5nOiBzdHJpbmcpIHtcbiAgLy8gICBsZXQgcmVzdWx0ID0gJyc7XG4gIC8vICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZXhTdHJpbmcubGVuZ3RoOyBpICs9IDIpIHtcbiAgLy8gICAgIGxldCBoZXhEaWdpdCA9IGhleFN0cmluZy5jaGFyQXQoaSkgKyBoZXhTdHJpbmcuY2hhckF0KGkgKyAxKTtcbiAgLy8gICAgIGxldCBudW0gPSBwYXJzZUludChoZXhEaWdpdCwgMTYpO1xuICAvLyAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobnVtKTtcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHJlc3VsdDtcbiAgLy8gfVxufVxuIl19