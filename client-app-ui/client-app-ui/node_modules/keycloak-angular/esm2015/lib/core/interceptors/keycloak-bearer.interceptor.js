import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { KeycloakService } from '../services/keycloak.service';
import * as ɵngcc0 from '@angular/core';
export class KeycloakBearerInterceptor {
    constructor(keycloak) {
        this.keycloak = keycloak;
    }
    isUrlExcluded({ method, url }, { urlPattern, httpMethods }) {
        const httpTest = httpMethods.length === 0 ||
            httpMethods.join().indexOf(method.toUpperCase()) > -1;
        const urlTest = urlPattern.test(url);
        return httpTest && urlTest;
    }
    intercept(req, next) {
        const { enableBearerInterceptor, excludedUrls } = this.keycloak;
        if (!enableBearerInterceptor) {
            return next.handle(req);
        }
        const shallPass = excludedUrls.findIndex(item => this.isUrlExcluded(req, item)) > -1;
        if (shallPass) {
            return next.handle(req);
        }
        return from(this.keycloak.isLoggedIn()).pipe(mergeMap((loggedIn) => loggedIn
            ? this.handleRequestWithTokenHeader(req, next)
            : next.handle(req)));
    }
    handleRequestWithTokenHeader(req, next) {
        return this.keycloak.addTokenToHeader(req.headers).pipe(mergeMap(headersWithBearer => {
            const kcReq = req.clone({ headers: headersWithBearer });
            return next.handle(kcReq);
        }));
    }
}
KeycloakBearerInterceptor.ɵfac = function KeycloakBearerInterceptor_Factory(t) { return new (t || KeycloakBearerInterceptor)(ɵngcc0.ɵɵinject(KeycloakService)); };
KeycloakBearerInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: KeycloakBearerInterceptor, factory: KeycloakBearerInterceptor.ɵfac });
KeycloakBearerInterceptor.ctorParameters = () => [
    { type: KeycloakService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeycloakBearerInterceptor, [{
        type: Injectable
    }], function () { return [{ type: KeycloakService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2xvYWstYmVhcmVyLmludGVyY2VwdG9yLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9rZXljbG9hay1hbmd1bGFyL3NyYy9saWIvY29yZS9pbnRlcmNlcHRvcnMva2V5Y2xvYWstYmVhcmVyLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRM0MsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQVUvRCxNQUFNLE9BQU8seUJBQXlCO0FBQUcsSUFDdkMsWUFBb0IsUUFBeUI7QUFBSSxRQUE3QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtBQUFDLElBQUUsQ0FBQztBQUNuRCxJQVNVLGFBQWEsQ0FDbkIsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFvQixFQUNqQyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQW9CO0FBQzlDLFFBQ0MsTUFBTSxRQUFRLEdBQ1osV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDO0FBQzlCLFlBQU0sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1RCxRQUNJLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekMsUUFDSSxPQUFPLFFBQVEsSUFBSSxPQUFPLENBQUM7QUFDL0IsSUFBRSxDQUFDO0FBQ0gsSUFRUyxTQUFTLENBQ2QsR0FBcUIsRUFDckIsSUFBaUI7QUFDbEIsUUFDQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUNwRSxRQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtBQUNsQyxZQUFNLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QixTQUFLO0FBQ0wsUUFDSSxNQUFNLFNBQVMsR0FDYixZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN6RSxRQUFJLElBQUksU0FBUyxFQUFFO0FBQ25CLFlBQU0sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLFNBQUs7QUFDTCxRQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzFDLFFBQVEsQ0FBQyxDQUFDLFFBQWlCLEVBQUUsRUFBRSxDQUFDLFFBQVE7QUFDOUMsWUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUM7QUFDdEQsWUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUN0QixDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFPVSw0QkFBNEIsQ0FDbEMsR0FBcUIsRUFDckIsSUFBaUI7QUFDbEIsUUFDQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckQsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7QUFDbkMsWUFBUSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztBQUNoRSxZQUFRLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxRQUFNLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDtxREF2RUMsVUFBVTsySUFDVDtBQUFDO0FBQW1ELFlBVjdDLGVBQWU7QUFBRzs7O3lFQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgTWF1cmljaW8gR2VtZWxsaSBWaWdvbG8gYW5kIGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXVyaWNpb3ZpZ29sby9rZXljbG9hay1hbmd1bGFyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwSW50ZXJjZXB0b3IsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEV2ZW50XG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEtleWNsb2FrU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2tleWNsb2FrLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXhjbHVkZWRVcmxSZWdleCB9IGZyb20gJy4uL2ludGVyZmFjZXMva2V5Y2xvYWstb3B0aW9ucyc7XG5cbi8qKlxuICogVGhpcyBpbnRlcmNlcHRvciBpbmNsdWRlcyB0aGUgYmVhcmVyIGJ5IGRlZmF1bHQgaW4gYWxsIEh0dHBDbGllbnQgcmVxdWVzdHMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gZXhjbHVkZSBzb21lIFVSTHMgZnJvbSBhZGRpbmcgdGhlIGJlYXJlciwgcGxlYXNlLCB0YWtlIGEgbG9va1xuICogYXQgdGhlIHtAbGluayBLZXljbG9ha09wdGlvbnN9IGJlYXJlckV4Y2x1ZGVkVXJscyBwcm9wZXJ0eS5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEtleWNsb2FrQmVhcmVySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGtleWNsb2FrOiBLZXljbG9ha1NlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgdXJsIGlzIGV4Y2x1ZGVkIGZyb20gaGF2aW5nIHRoZSBCZWFyZXIgQXV0aG9yaXphdGlvblxuICAgKiBoZWFkZXIgYWRkZWQuXG4gICAqXG4gICAqIEBwYXJhbSByZXEgaHR0cCByZXF1ZXN0IGZyb20gQGFuZ3VsYXIgaHR0cCBtb2R1bGUuXG4gICAqIEBwYXJhbSBleGNsdWRlZFVybFJlZ2V4IGNvbnRhaW5zIHRoZSB1cmwgcGF0dGVybiBhbmQgdGhlIGh0dHAgbWV0aG9kcyxcbiAgICogZXhjbHVkZWQgZnJvbSBhZGRpbmcgdGhlIGJlYXJlciBhdCB0aGUgSHR0cCBSZXF1ZXN0LlxuICAgKi9cbiAgcHJpdmF0ZSBpc1VybEV4Y2x1ZGVkKFxuICAgIHsgbWV0aG9kLCB1cmwgfTogSHR0cFJlcXVlc3Q8YW55PixcbiAgICB7IHVybFBhdHRlcm4sIGh0dHBNZXRob2RzIH06IEV4Y2x1ZGVkVXJsUmVnZXhcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaHR0cFRlc3QgPVxuICAgICAgaHR0cE1ldGhvZHMubGVuZ3RoID09PSAwIHx8XG4gICAgICBodHRwTWV0aG9kcy5qb2luKCkuaW5kZXhPZihtZXRob2QudG9VcHBlckNhc2UoKSkgPiAtMTtcblxuICAgIGNvbnN0IHVybFRlc3QgPSB1cmxQYXR0ZXJuLnRlc3QodXJsKTtcblxuICAgIHJldHVybiBodHRwVGVzdCAmJiB1cmxUZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdCBpbXBsZW1lbnRhdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgcmVxdWVzdCB1cmwgbWF0Y2hlcyB0aGUgZXhjbHVkZWRVcmxzLlxuICAgKiBJZiBub3QsIGFkZHMgdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHRoZSByZXF1ZXN0IGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHJlcVxuICAgKiBAcGFyYW0gbmV4dFxuICAgKi9cbiAgcHVibGljIGludGVyY2VwdChcbiAgICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgbmV4dDogSHR0cEhhbmRsZXJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGNvbnN0IHsgZW5hYmxlQmVhcmVySW50ZXJjZXB0b3IsIGV4Y2x1ZGVkVXJscyB9ID0gdGhpcy5rZXljbG9haztcbiAgICBpZiAoIWVuYWJsZUJlYXJlckludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaGFsbFBhc3M6IGJvb2xlYW4gPVxuICAgICAgZXhjbHVkZWRVcmxzLmZpbmRJbmRleChpdGVtID0+IHRoaXMuaXNVcmxFeGNsdWRlZChyZXEsIGl0ZW0pKSA+IC0xO1xuICAgIGlmIChzaGFsbFBhc3MpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9tKHRoaXMua2V5Y2xvYWsuaXNMb2dnZWRJbigpKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoKGxvZ2dlZEluOiBib29sZWFuKSA9PiBsb2dnZWRJblxuICAgICAgICA/IHRoaXMuaGFuZGxlUmVxdWVzdFdpdGhUb2tlbkhlYWRlcihyZXEsIG5leHQpXG4gICAgICAgIDogbmV4dC5oYW5kbGUocmVxKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIHRva2VuIG9mIHRoZSBjdXJyZW50IHVzZXIgdG8gdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyXG4gICAqXG4gICAqIEBwYXJhbSByZXFcbiAgICogQHBhcmFtIG5leHRcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlUmVxdWVzdFdpdGhUb2tlbkhlYWRlcihcbiAgICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgbmV4dDogSHR0cEhhbmRsZXJcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5rZXljbG9hay5hZGRUb2tlblRvSGVhZGVyKHJlcS5oZWFkZXJzKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoaGVhZGVyc1dpdGhCZWFyZXIgPT4ge1xuICAgICAgICBjb25zdCBrY1JlcSA9IHJlcS5jbG9uZSh7IGhlYWRlcnM6IGhlYWRlcnNXaXRoQmVhcmVyIH0pO1xuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUoa2NSZXEpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=